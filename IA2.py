import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay, mean_absolute_error, r2_score
from sklearn.utils.multiclass import unique_labels
import matplotlib.pyplot as plt
import collections

# =======================
# 1. Carregamento e limpeza
# =======================
df = pd.read_csv('PIB_taxa_desocup_gastos_publi_mort.csv', sep=';')

# Convertendo todos os valores para num√©ricos, tratando erros
for col in df.columns:
    df[col] = df[col].astype(str).str.replace('.', '', regex=False).str.replace(',', '.').str.strip()
    df[col] = pd.to_numeric(df[col], errors='coerce')

# =======================
# 2. Features e targets
# =======================
X = df[['Popula√ß√£o Total Brasileira (Indiv√≠duos)', 'PIB (R$)', 'Taxa de Desocupa√ß√£o (%)',
        'Gastos P√∫blicos na √Årea da Sa√∫de (R$) - Valor Pago',
        'Gastos P√∫blicos na √Årea da Sa√∫de (R$) - Valor Liquidado']].values

y_reg = df['Mortalidade - √ìbitos (Individuos)'].values

# Classifica√ß√£o (baixo, m√©dio, alto)
def classificar_mortalidade(v):
    if v <= 49903: #valores definidos atrav√©s da an√°lise da m√©dia e desvio padr√£o
        return 'baixo'
    elif v <= 76881:
        return 'medio'
    else:
        return 'alto'   

y_clf = np.array([classificar_mortalidade(v) for v in y_reg])
le = LabelEncoder()
y_clf_encoded = le.fit_transform(y_clf)

# =======================
# 3. Normaliza√ß√£o
# =======================
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# =======================
# 4. Divis√£o treino/teste
# =======================
X_train, X_test, y_reg_train, y_reg_test, y_clf_train, y_clf_test = train_test_split(
    X_scaled, y_reg, y_clf_encoded, test_size=0.2
)

# =======================
# 5. Modelos Random Forest
# =======================
clf_model = RandomForestClassifier(n_estimators=100, random_state=42)
clf_model.fit(X_train, y_clf_train)
y_clf_pred = clf_model.predict(X_test)

# Regressor
reg_model = RandomForestRegressor(n_estimators=100, random_state=42)
reg_model.fit(X_train, y_reg_train)
y_reg_pred = reg_model.predict(X_test)

# =======================
# 6. Avalia√ß√£o Classifica√ß√£o
# =======================

# Mostra a acur√°cia do c√≥digo em rela√ß√£o aos dados de teste
acc = accuracy_score(y_clf_test, y_clf_pred)
print(f"\n‚úÖ Acur√°cia da classifica√ß√£o: {acc * 100:.2f}%")


# For√ßa as 3 classes (mesmo que alguma n√£o apare√ßa no conjunto de teste)
all_labels = np.array([0, 1, 2])  # Classes codificadas: alto, baixo, medio
cm = confusion_matrix(y_clf_test, y_clf_pred, labels=all_labels)

# Mostrando no m√°ximo 20 amostras, ou o total dispon√≠vel
n_to_show = min(20, len(y_clf_pred))

print("\nüìä Exibindo as primeiras predi√ß√µes:")
for i in range(n_to_show):
    pred = le.inverse_transform([y_clf_pred[i]])[0]
    real = le.inverse_transform([y_clf_test[i]])[0]
    print(f"Predi√ß√£o: {pred} | Real: {real}")

# Criando o gr√°fico com a matriz de confus√£o
fig, ax = plt.subplots(figsize=(8, 6))
fig.canvas.manager.set_window_title("Matriz de Confus√£o - Classifica√ß√£o")

# Exibe todas as classes no eixo em ordem (mesmo que tenham valor 0)
ordered_labels = ['baixo', 'medio', 'alto']
ordered_indices = le.transform(ordered_labels)
cm_ordered = cm[np.ix_(ordered_indices, ordered_indices)]

disp = ConfusionMatrixDisplay(confusion_matrix=cm_ordered, display_labels=ordered_labels)
disp.plot(ax=ax, cmap='Blues')

plt.title("Matriz de Confus√£o - Classifica√ß√£o")
plt.xlabel("Previs√µes")
plt.ylabel("Valores Reais")
plt.tight_layout()
plt.show()

# =======================
# 7. Avalia√ß√£o Regress√£o
# =======================
mae = mean_absolute_error(y_reg_test, y_reg_pred)
r2 = r2_score(y_reg_test, y_reg_pred)

print(f'üìâ Erro M√©dio Absoluto (MAE - regress√£o): {mae:.2f}')
print(f'üìà R¬≤ Score (regress√£o): {r2:.2f}')

# =======================
# 8. Gr√°fico Regress√£o
# =======================
plt.figure(figsize=(8, 6))
plt.scatter(y_reg_test, y_reg_pred, alpha=0.7)
plt.plot([min(y_reg_test), max(y_reg_test)], [min(y_reg_test), max(y_reg_test)], 'r--')
plt.xlabel("Valores Reais")
plt.ylabel("Preditos")
plt.title("Random Forest - Regress√£o (√ìbitos)")
plt.grid(True)
plt.tight_layout()
plt.show()

# =======================
# 9. Distribui√ß√£o das classes
# =======================
print("\nüìä Distribui√ß√£o das classes:")
print(collections.Counter(y_clf))